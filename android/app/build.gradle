plugins {
    id "com.android.application"
}

android {
    compileSdk 33
    namespace "com.neodesys.minedigger"

    defaultConfig {
        minSdk 16
        targetSdk 33
        versionCode 4
        versionName "1.0"
    }

    sourceSets.main {
        jniLibs.srcDir "src/main/libs"
        jni.srcDirs = []
        assets.srcDir "../../res"
    }

    androidResources {
        ignoreAssetsPattern "BackGround.jpg:ScoreBack.jpg"
    }

    lint {
        disable "AllowBackup"
    }

    signingConfigs {
        release {
            storeFile file("../minedigger.keystore")
            keyAlias "release"
            storePassword = getPassword("store")
            keyPassword = getPassword("key")
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            jniDebuggable true
        }

        release {
            debuggable false
            jniDebuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release

            ndk {
                debugSymbolLevel "FULL"
            }
        }
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/jni/Android.mk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

import groovy.swing.SwingBuilder

def getPassword(String type) {
    String password = ""

    def signingTasks = ["assemble", "assembleRelease", "build", "buildRelease", "bundle", "bundleRelease", "installRelease"]
    signingTasks.retainAll(gradle.startParameter.taskNames)
    if (signingTasks.size() <= 0)
        return password

    if (System.console() == null) {
        System.setProperty("java.awt.headless", "false")
        new SwingBuilder().edt {
            dialog(modal: true, title: "Password", alwaysOnTop: true, resizable: false, locationRelativeTo: null, pack: true, show: true) {
                vbox {
                    label(text: "Please enter " + type + " password:")
                    def input = passwordField()
                    button(defaultButton: true, text: "OK", actionPerformed: {
                        password = input.password
                        dispose()
                    })
                }
            }
        }
    } else {
        password = System.console().readPassword("\nPlease enter " + type + " password: ")
    }

    if (password.size() <= 0)
        throw new InvalidUserDataException("You must enter " + type + " password to proceed.")

    return password
}
