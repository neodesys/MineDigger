plugins {
    id "com.android.application"
}

android {
    compileSdk 30

    defaultConfig {
        minSdk 16
        targetSdk 30
        versionCode 3
        versionName "1.0"
    }

    sourceSets.main {
        jniLibs.srcDir "src/main/libs"
        jni.srcDirs = []
        assets.srcDir "../../res"
    }

    aaptOptions {
        ignoreAssets "BackGround.jpg:ScoreBack.jpg"
    }

    lintOptions {
        disable "AllowBackup"
    }

    signingConfigs {
        release {
            storeFile file("../minedigger.keystore")
            keyAlias "release"
            storePassword ""
            keyPassword ""
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            jniDebuggable true
        }

        release {
            debuggable false
            jniDebuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release

            ndk {
                debugSymbolLevel "FULL"
            }
        }
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/jni/Android.mk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

import groovy.swing.SwingBuilder;

tasks.register("askReleaseSigningPasswords") {
    doLast {
        def storePass = ""
        def keyPass = ""

        if (System.console() == null) {
            System.setProperty("java.awt.headless", "false")
            new SwingBuilder().edt {
                dialog(modal: true, title: "Keystore passwords", alwaysOnTop: true, resizable: false, locationRelativeTo: null, pack: true, show: true) {
                    vbox {
                        label(text: "Please enter keystore password:")
                        def input1 = passwordField()
                        label(text: "Please enter signing key password:")
                        def input2 = passwordField()
                        button(defaultButton: true, text: "OK", actionPerformed: {
                                storePass = input1.password;
                                keyPass = input2.password;
                                dispose();
                        })
                    }
                }
            }
        } else {
            storePass = System.console().readPassword("\nPlease enter keystore password: ")
            keyPass = System.console().readPassword("\nPlease enter signing key password: ")
        }

        if ((storePass.size() <= 0) || (keyPass.size() <= 0)) {
            throw new InvalidUserDataException("You must enter keystore passwords to proceed.")
        }

        android.signingConfigs.release.storePassword = new String(storePass)
        android.signingConfigs.release.keyPassword = new String(keyPass)
    }
}

tasks.whenTaskAdded { task ->
    if ((task.name == "packageRelease") || (task.name == "signReleaseBundle")) {
        task.dependsOn askReleaseSigningPasswords
    }
}
